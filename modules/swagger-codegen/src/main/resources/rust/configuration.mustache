{{>partial_header}}
use failure::Error;
use failure::err_msg;
use hyper::client::Connect;
use hyper::{Client, Uri};

pub struct Configuration<C: Connect> {
  pub base_path: String,
  pub user_agent: Option<String>,
  pub client: Client<C>,
  pub uri_composer: Box<Fn(&str, &str) -> Result<Uri, Error>>,
  pub sas_token: Option<String>,
}

impl<C: Connect> Configuration<C> {
  pub fn new(client: Client<C>) -> Configuration<C> {
    Configuration {
      base_path: "{{{basePath}}}".to_owned(),
      user_agent: {{#httpUserAgent}}Some("{{{.}}}".to_owned()){{/httpUserAgent}}{{^httpUserAgent}}Some("Swagger-Codegen/{{version}}/rust".to_owned()){{/httpUserAgent}},
      client: client,
      uri_composer: Box::new(|base_path, path| {
          format!("{}{}", base_path, path)
              .parse()
              .map_err(|_| format_err!("Url parse error"))
      }),
      sas_token: None,
    }
  }
}
